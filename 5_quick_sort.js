/**
 * * алгоритм быстрой сортировки | Сортировка Хоара
 * * Работает он О(log2n * n)
 * * Алгоритм работает по-называемому принципу "Разделяй и властвуй". Суть в том, что мы делим массив на под-массивы. И каждый раз мы выбираем опорный(центральный) элемент массива (Его можно выбрать случайно, но чаще всего берут центральный). Пробегаемся по массиву и все элементы, который меньше опорного элемента добавляем в один массив, а которые больше в другой массив. У нас получается два массива один с меньшими элементами, другой с большими. Для каждого массива выполняется такая же операция и так делается до тех пор, пока длина массива не станет = 1. Следовательно это условие выхода из рекурсии, и потом склеиваем отсортированные массивы в один.
 *
 * @format
 */

const arr = [
  0, 3, 2, 5, 6, 8, 23, 9, 4, 2, 1, 2, 9, 6, 4, 1, 7, -1, -5, 23, 6, 2, 35, 6,
  3, 32, 9, 4, 2, 1, 2, 9, 6, 4, 1, 7, -1, -5, 23, 9, 4, 2, 1, 2, 9, 6, 4, 1, 7,
  -1, -5, 23,
];
let count = 0;

function QuickSort(array) {
  if (array.length <= 1) {
    return array;
  }

  let pivotIndex = Math.floor(array.length / 2);
  let pivot = array[pivotIndex];
  let less = [];
  let more = [];

  for (let i = 0; i < array.length; i++) {
    count++;

    if (i === pivotIndex) {
      continue;
    }

    if (array[i] < pivot) {
      less.push(array[i]);
    } else {
      more.push(array[i]);
    }
  }
  return [...QuickSort(less), pivot, ...QuickSort(more)];
}

console.log(" QuickSort=>", QuickSort(arr));
console.log("count =>", count);
